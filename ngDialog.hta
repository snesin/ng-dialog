<html>
<head>
  <HTA:APPLICATION ID="ngDialog" APPLICATIONNAME="ng-dialog" />
  <style>
body,table,input {
  font-family:verdana;
}
.code {
  font-family:fixedsys;
  font-size:16px;
}
.leader {
  border-right:none;
}
.trailer {
  display:inline-block;
  border-top-style: inset;
  border-top-width: 2px;
  border-bottom-style: inset;
  border-bottom-width: 2px;
  border-right-style: inset;
  border-right-width: 2px;
  border-left: none;
  padding-top: 1px;
  padding-bottom: 1px;
  padding-right: 1px;
}
  </style>
</head>

<body onload="body_onload()">
  <input type=button value="Refresh" onclick="window.location.reload(true);" />
  <table>
    <tr>
      <td align=right nowrap>Dialog Name:</td>
      <td nowrap><input type=text class="code leader" id="dialogName" style="text-align:right" value=""
          size=30 onkeyup="updateDependencies()"><span class="code trailer">Dialog</span></td>
    </tr>
    <tr>
      <td align=right nowrap>Dialog Width:</td>
      <td nowrap><input type=text class="code leader" id="dialogWidth" style="text-align:right" value="256" size=6><span
          class="code trailer">px</span></td>
    </tr>
    <tr>
      <td align=right nowrap>View Names:</td>
      <td><input type=text class="code" id="dialogViews" style="width:100%" value=""></td>
    </tr>
    <tr>
      <td align=right nowrap>Template Library:</td>
      <td><input type=text class="code" id="templateLibrary" style="width:100%" value="" onkeyup="updateDependencies()"></td>
    </tr>
    <tr>
      <td align=right nowrap>Template Name:</td>
      <td><select class="code" id="templateName" style="width:100%" value="" onchange="updateDependencies()"></select></td>
    </tr>
    <tr>
      <td align=right nowrap>Selector:</td>
      <td nowrap><input type=text class="code leader" id="selectorLead" style="text-align:right" value="app-Dialogs"
          size=30><span class="code trailer">-<span id="selectorLead_label">MyDialog</span></span></td>
    </tr>
    <tr>
      <td align=right nowrap valign=top>File Name Style:</td>
      <td>
        <input type=radio id="fileNameFormat_angular" name="fileNameFormat" checked><label class="code" for="fileNameFormat_angular"/>
        <span id="fileNameFormat_angular_label">angular-standard</span>.module.ts</label><br>
        <input type=radio id="fileNameFormat_CamelCase" name="fileNameFormat"><label class="code" for="fileNameFormat_CamelCase"/>
        <span id="fileNameFormat_CamelCase_label">SensibleCamelCase</span>Module.ts</label>
      </td>
    </tr>
    <tr>
      <td align=right nowrap>Path to Dialogs:</td>
      <td nowrap><input type=text class="code" id="outputDirectory" value="../Dialogs" style="width:100%" onkeyup="updateDependencies()"></td>
    </tr>
    <tr>
      <td align=right nowrap>Test only:</td>
      <td nowrap><input type=checkbox id="justExperiment"><label for="justExperiment">Do not create directories
          or files.</label></td>
    </tr>
    <tr>
      <td colspan=2 align=middle nowrap><input type=button id="createButton" value="Create Dialog Skeleton" disabled
          onclick="generateDialogSkeleton()"></td>
    </tr>
  </table>
  <textarea id="consoleOutput" wrap=off readonly rows=20 style="width:100%;background-color:#eeeeee"></textarea>
</body>
</html>
<script>
var defaultConfigFile = "ngDialog.cfg";
if (ngDialog.commandLine.search(/^.*?ngDialog.hta"?\s"?(.+?)"?\s*$/) === 0)
  defaultConfigFile = RegExp.$1;
var supportedFileNameFormats = ["angular", "CamelCase"];
var templateList = [];
var fso = new ActiveXObject("Scripting.FileSystemObject");

var config = {
  dialogName: "",
  dialogWidth: 200,
  dialogViews: "",
  templateLibrary: "Templates",
  templateName: "",
  selectorLead: "app-Dialog",
  fileNameFormat: closestFileNameFormat(),
  justExperiment: false,
  outputDirectory: ""
};

if (fso.FileExists(defaultConfigFile))
  readConfigFile(defaultConfigFile);
else if (defaultConfigFile)
  writeToConsole("Settings file not found: "+defaultConfigFile);

function readConfigFile(configFile) {
  writeToConsole("Loading settings from "+configFile);
  var stream = fso.GetFile(configFile).OpenAsTextStream(1);
  var contents = stream.ReadAll().replace(/\r\n/g, "\n").split("\n");
  stream.Close();
  stream = null;
  for (var i = 0; i < contents.length; i++)
    if (contents[i].search(/^\s*(\w+)\s*=\s*(.+?)(?:\s+#.*)?\s*$/) === 0) {
      var key = RegExp.$1;
      var value = RegExp.$2;
      switch (key) {
      case "extends":
        readConfigFile(relativePath(configFile, value));
        break;
      case "dialogViews":
        config[key] = value.replace(/\W+/, ",");
        break;
      case "fileNameFormat":
        config[key] = closestFileNameFormat(value);
        break;
      case "justExperiment":
        config[key] = value !== "false";
        break;
      case "outputFolder" :
      case "templateLibrary" :
        config[key] = relativePath(configFile,value);
        break;
      default:
        config[key] = value;
        break;
    }
  }
}

function isTemplateComplex(folder) {
  for (var files = new Enumerator(folder.Files); !files.atEnd(); files.moveNext())
    if (isNameComplex(files.item().Name))
      return true;
  for (var subfolders = new Enumerator(folder.SubFolders); !subfolders.atEnd(); subfolders.moveNext())
    if (isNameComplex(subfolders.item().Name) || isTemplateComplex(subfolders.item()))
      return true;
  return false;
}
function isNameComplex(name) {
  return name.indexOf("{$") >= 0;
}
function relativePath(from,to){
  from=from.split('/');
  from.pop();
  from.push(to);
  return from.join('/');
}
function closestFileNameFormat(name) {
  for (var i=0;i<supportedFileNameFormats.length;i++)
    if (supportedFileNameFormats[i]===name)
      return name;
  return supportedFileNameFormats[0];
}
function body_onload() {
  document.getElementById("dialogName").value = config.dialogName || "";
  document.getElementById("dialogWidth").value = config.dialogWidth || 200;
  document.getElementById("dialogViews").value = config.dialogViews || "";
  document.getElementById("templateLibrary").value = config.templateLibrary || "Templates";
  document.getElementById("templateName").value = config.templateName || "Default";
  document.getElementById("selectorLead").value = config.selectorLead || "app-Dialog";
  document.getElementById("fileNameFormat_" + config.fileNameFormat).checked = true;
  document.getElementById("justExperiment").checked = !!config.justExperiment;
  document.getElementById("outputDirectory").value = config.outputDirectory || "";
  updateDependencies();
}
var lastLibrary = null;
function updateDependencies() {
  var dialogName = document.getElementById("dialogName");
  var dialogViews = document.getElementById("dialogViews");
  var templateLibrary = document.getElementById("templateLibrary");
  var templateName = document.getElementById("templateName");
  var outputDirectory = document.getElementById("outputDirectory");
  if (templateLibrary.value!==lastLibrary) {
    var prevValue = templateName.value || config.templateName;
    while (templateName.length > 0)
      templateName.remove(0);
    if (templateLibrary.value && fso.FolderExists(templateLibrary.value))
      for (var subfolders = new Enumerator(fso.GetFolder(templateLibrary.value).SubFolders); !subfolders.atEnd(); subfolders.moveNext()) {
          var directory=subfolders.item().Name;
          var option = document.createElement("option");
          option.value = directory;
          if (directory === prevValue)
            option.selected = true;
          option.innerText = directory;
          templateName.appendChild(option);
        }
    lastLibrary=templateLibrary.value;
  }
  var label = document.getElementById("selectorLead_label");
  label.innerText = dialogName.value || "MyDialog";
  var label = document.getElementById("fileNameFormat_angular_label");
  label.innerText = angularStandardName(dialogName.value) || "angular-standard";
  var label = document.getElementById("fileNameFormat_CamelCase_label");
  label.innerText = dialogName.value || "SensibleCamelCase";

  document.getElementById("createButton").disabled = !dialogName.value || !templateName.value || !outputDirectory.value;
}
function angularStandardName(name) {
  return name.replace(/([a-z])([A-Z])/g, function ($0, $1, $2) { return $1 + "-" + $2; }).toLowerCase();
}
function writeToConsole(value) {
  var c = document.getElementById("consoleOutput");
  c.value += value + "\n";
  c.scrollTop = 1000000000;
}
function generateDialogSkeleton() {
  var dialogName = document.getElementById("dialogName").value.replace(/\W/g, "");
  var dialogViews = document.getElementById("dialogViews").value.replace(/^\W+/, "").replace(/\W+$/, "").replace(/\W+/, ",");
  var templateLibrary = document.getElementById("templateLibrary").value.replace(/^\s+/, "").replace(/\s+$/, "");
  var templateName = document.getElementById("templateName").value.replace(/^\s+/, "").replace(/\s+$/, "");
  var outputDirectory = document.getElementById("outputDirectory").value.replace(/^\s+/, "").replace(/\s+$/, "");
  var dialogWidth = document.getElementById("dialogWidth").value;
  var fileNameFormat = document.getElementById("fileNameFormat_CamelCase").checked ? "CamelCase" : "angular";
  var selectorLead = document.getElementById("selectorLead").value.replace(/^\s+/, "").replace(/\s+$/, "");
  var justExperiment = document.getElementById("justExperiment").checked ? true : false;

  var commandLine = "";
  commandLine += "node";
  commandLine += " ngDialog.js";
  commandLine += " \"-o=" + outputDirectory + "\"";
  commandLine += " \"-l=" + templateLibrary + "\"";
  commandLine += " \"-t=" + templateName + "\"";
  commandLine += " \"-d=" + dialogName + "\"";
  commandLine += " \"-v=" + dialogViews + "\"";
  commandLine += " \"-w=" + dialogWidth + "\"";
  commandLine += " \"-s=" + selectorLead + "\"";
  commandLine += " \"-f=" + fileNameFormat + "\"";
  if (justExperiment)
    commandLine += " -x";

  writeToConsole(commandLine);
  var shell = new ActiveXObject("WScript.Shell")
  shell.Run("cmd /C " + commandLine + " >out.txt", 0, true);

  if (fso.FileExists("out.txt")) {
    var stream = fso.GetFile("out.txt").OpenAsTextStream(1);
    writeToConsole(stream.ReadAll());
    stream.Close();
    stream = null;
    fso.DeleteFile("out.txt");
  }
}
</script>
